[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "password_validation",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "password_validation",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "EmailAddress",
        "importPath": "allauth.account.models",
        "description": "allauth.account.models",
        "isExtraImport": true,
        "detail": "allauth.account.models",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "pre_delete",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "default_token_generator",
        "importPath": "django.contrib.auth.tokens",
        "description": "django.contrib.auth.tokens",
        "isExtraImport": true,
        "detail": "django.contrib.auth.tokens",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_encode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "urlsafe_base64_decode",
        "importPath": "django.utils.http",
        "description": "django.utils.http",
        "isExtraImport": true,
        "detail": "django.utils.http",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "ruralmart.asgi",
        "description": "ruralmart.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "ruralmart.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Load environment variables from .env file\nload_dotenv()\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.getenv(\"DJANGO_SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.getenv('DJANGO_DEBUG') == 'True'\nALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS').split(',')",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "SECRET_KEY = os.getenv(\"DJANGO_SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.getenv('DJANGO_DEBUG') == 'True'\nALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS').split(',')\n# Application definition\nAUTH_USER_MODEL = 'users.CustomUser'\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "DEBUG = os.getenv('DJANGO_DEBUG') == 'True'\nALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS').split(',')\n# Application definition\nAUTH_USER_MODEL = 'users.CustomUser'\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS').split(',')\n# Application definition\nAUTH_USER_MODEL = 'users.CustomUser'\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'users.CustomUser'\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"corsheaders\",",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"corsheaders\",\n    \"rest_framework\",\n    'allauth',",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',\n    ),\n}\n# Django Allauth settings\nAUTHENTICATION_BACKENDS = (",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = (\n    'allauth.account.auth_backends.AuthenticationBackend',\n)\nMIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"allauth.account.middleware.AccountMiddleware\",",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    'http://localhost:3000',  # Adjust to your frontend URL\n]\nROOT_URLCONF = \"ruralmart.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "ROOT_URLCONF = \"ruralmart.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "WSGI_APPLICATION = \"ruralmart.wsgi.application\"\n# Database\n# https://docs.djangoproject.com/en/5.2/ref/settings/#databases\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.mysql\",\n        \"NAME\": os.getenv(\"DATABASE_NAME\"),\n        \"USER\": os.getenv('DATABASE_USER'),\n        \"PASSWORD\": os.getenv('DATABASE_PASSWORD'),\n        \"HOST\": os.getenv(\"DATABASE_HOST\"),",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.mysql\",\n        \"NAME\": os.getenv(\"DATABASE_NAME\"),\n        \"USER\": os.getenv('DATABASE_USER'),\n        \"PASSWORD\": os.getenv('DATABASE_PASSWORD'),\n        \"HOST\": os.getenv(\"DATABASE_HOST\"),\n        \"PORT\": os.getenv(\"DATABASE_PORT\", \"3306\"),  # Default MySQL port\n    }\n}",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Email settings",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Email settings\nEMAIL_BACKEND = os.getenv('EMAIL_BACKEND')",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.2/howto/static-files/\nSTATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Email settings\nEMAIL_BACKEND = os.getenv('EMAIL_BACKEND')\nEMAIL_HOST = os.getenv('EMAIL_HOST')",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "STATIC_URL = \"static/\"\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Email settings\nEMAIL_BACKEND = os.getenv('EMAIL_BACKEND')\nEMAIL_HOST = os.getenv('EMAIL_HOST')\nEMAIL_PORT = os.getenv('EMAIL_PORT')\nEMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') == 'True'\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\n# Email settings\nEMAIL_BACKEND = os.getenv('EMAIL_BACKEND')\nEMAIL_HOST = os.getenv('EMAIL_HOST')\nEMAIL_PORT = os.getenv('EMAIL_PORT')\nEMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') == 'True'\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\n# List of fields for signup\nACCOUNT_SIGNUP_FIELDS = ['email*', 'password1', 'password2']",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "EMAIL_BACKEND = os.getenv('EMAIL_BACKEND')\nEMAIL_HOST = os.getenv('EMAIL_HOST')\nEMAIL_PORT = os.getenv('EMAIL_PORT')\nEMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') == 'True'\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\n# List of fields for signup\nACCOUNT_SIGNUP_FIELDS = ['email*', 'password1', 'password2']\n# Login method (email or username)\nACCOUNT_LOGIN_METHODS = ['email']  # Ensure this is a list, not a string",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "EMAIL_HOST = os.getenv('EMAIL_HOST')\nEMAIL_PORT = os.getenv('EMAIL_PORT')\nEMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') == 'True'\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\n# List of fields for signup\nACCOUNT_SIGNUP_FIELDS = ['email*', 'password1', 'password2']\n# Login method (email or username)\nACCOUNT_LOGIN_METHODS = ['email']  # Ensure this is a list, not a string\n# Mandatory email verification setting",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "EMAIL_PORT = os.getenv('EMAIL_PORT')\nEMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') == 'True'\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\n# List of fields for signup\nACCOUNT_SIGNUP_FIELDS = ['email*', 'password1', 'password2']\n# Login method (email or username)\nACCOUNT_LOGIN_METHODS = ['email']  # Ensure this is a list, not a string\n# Mandatory email verification setting\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS') == 'True'\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\n# List of fields for signup\nACCOUNT_SIGNUP_FIELDS = ['email*', 'password1', 'password2']\n# Login method (email or username)\nACCOUNT_LOGIN_METHODS = ['email']  # Ensure this is a list, not a string\n# Mandatory email verification setting\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'\nSILENCED_SYSTEM_CHECKS = ['account.W036']",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\n# List of fields for signup\nACCOUNT_SIGNUP_FIELDS = ['email*', 'password1', 'password2']\n# Login method (email or username)\nACCOUNT_LOGIN_METHODS = ['email']  # Ensure this is a list, not a string\n# Mandatory email verification setting\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'\nSILENCED_SYSTEM_CHECKS = ['account.W036']",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\n# List of fields for signup\nACCOUNT_SIGNUP_FIELDS = ['email*', 'password1', 'password2']\n# Login method (email or username)\nACCOUNT_LOGIN_METHODS = ['email']  # Ensure this is a list, not a string\n# Mandatory email verification setting\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'\nSILENCED_SYSTEM_CHECKS = ['account.W036']",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_SIGNUP_FIELDS",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1', 'password2']\n# Login method (email or username)\nACCOUNT_LOGIN_METHODS = ['email']  # Ensure this is a list, not a string\n# Mandatory email verification setting\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'\nSILENCED_SYSTEM_CHECKS = ['account.W036']",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_LOGIN_METHODS",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "ACCOUNT_LOGIN_METHODS = ['email']  # Ensure this is a list, not a string\n# Mandatory email verification setting\nACCOUNT_EMAIL_VERIFICATION = 'mandatory'\nSILENCED_SYSTEM_CHECKS = ['account.W036']",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_VERIFICATION",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "ACCOUNT_EMAIL_VERIFICATION = 'mandatory'\nSILENCED_SYSTEM_CHECKS = ['account.W036']",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "SILENCED_SYSTEM_CHECKS",
        "kind": 5,
        "importPath": "ruralmart.settings",
        "description": "ruralmart.settings",
        "peekOfCode": "SILENCED_SYSTEM_CHECKS = ['account.W036']",
        "detail": "ruralmart.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "ruralmart.urls",
        "description": "ruralmart.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"auth/users/\", include(\"users.urls\")),\n    path('accounts/', include('allauth.urls')),\n    path(\"admin/\", admin.site.urls),\n]",
        "detail": "ruralmart.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "ruralmart.wsgi",
        "description": "ruralmart.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "ruralmart.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "users.migrations.0001_initial",
        "description": "users.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        (\"auth\", \"0012_alter_user_first_name_max_length\"),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name=\"CustomUser\",\n            fields=[\n                (",
        "detail": "users.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "CustomUserAdmin",
        "kind": 6,
        "importPath": "users.admin",
        "description": "users.admin",
        "peekOfCode": "class CustomUserAdmin(UserAdmin):\n    model = CustomUser\n    list_display = ('email', 'first_name', 'last_name', 'phone_number', 'role', 'is_active', 'is_staff')\n    search_fields = ('email', 'first_name', 'last_name')\n    ordering = ('email',)\n    # Customize fieldsets to display the model fields more clearly in the admin panel\n    fieldsets = (\n        (None, {'fields': ('email', 'password')}),\n        ('Personal Info', {'fields': ('first_name', 'last_name', 'phone_number', 'role')}),\n        ('Permissions', {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),",
        "detail": "users.admin",
        "documentation": {}
    },
    {
        "label": "UsersConfig",
        "kind": 6,
        "importPath": "users.apps",
        "description": "users.apps",
        "peekOfCode": "class UsersConfig(AppConfig):\n    default_auto_field = \"django.db.models.BigAutoField\"\n    name = \"users\"\n    def ready(self):\n        import users.signals  # Connect the signals when the app is ready",
        "detail": "users.apps",
        "documentation": {}
    },
    {
        "label": "CustomUser",
        "kind": 6,
        "importPath": "users.models",
        "description": "users.models",
        "peekOfCode": "class CustomUser(AbstractUser):\n    username = None  # Disable username field\n    first_name = models.CharField(max_length=255, blank=True, null=True)\n    last_name = models.CharField(max_length=255, blank=True, null=True)\n    email = models.EmailField(unique=True, blank=False, null=False)\n    phone_number = models.CharField(max_length=15, blank=True, null=True)\n    role = models.CharField(max_length=50, choices=ROLE_CHOICES, default='customer')\n    date_joined = models.DateTimeField(auto_now_add=True)\n    last_login = models.DateTimeField(auto_now=True)\n    # The required field is email",
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "UserProfile",
        "kind": 6,
        "importPath": "users.models",
        "description": "users.models",
        "peekOfCode": "class UserProfile(models.Model):\n    user = models.OneToOneField(CustomUser, on_delete=models.CASCADE)\n    address = models.CharField(max_length=255, blank=True, null=True)\n    profile_picture = models.ImageField(upload_to='profile_pictures/', blank=True, null=True)\n    def __str__(self):\n        return f'Profile of {self.user.email}'",
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "ROLE_CHOICES",
        "kind": 5,
        "importPath": "users.models",
        "description": "users.models",
        "peekOfCode": "ROLE_CHOICES = [\n        ('customer', 'Customer'),\n        ('farmer', 'Farmer'),\n        ('artisan', 'Artisan'),\n        ('admin', 'Admin'),\n    ]\n# Create your models here.\nclass CustomUser(AbstractUser):\n    username = None  # Disable username field\n    first_name = models.CharField(max_length=255, blank=True, null=True)",
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "RegisterSerializer",
        "kind": 6,
        "importPath": "users.serializers",
        "description": "users.serializers",
        "peekOfCode": "class RegisterSerializer(serializers.ModelSerializer):\n    password = serializers.CharField(write_only=True, required=True, style={'input_type': 'password'})\n    password_confirmation = serializers.CharField(write_only=True, required=True, style={'input_type': 'password'})\n    class Meta:\n        model = User\n        fields = ['first_name', 'last_name', 'email', 'password', 'password_confirmation', 'phone_number']\n    def validate(self, attrs):\n        # Validate that passwords match\n        if attrs['password'] != attrs['password_confirmation']:\n            raise serializers.ValidationError(\"Passwords do not match.\") ",
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "create_user_profile",
        "kind": 2,
        "importPath": "users.signals",
        "description": "users.signals",
        "peekOfCode": "def create_user_profile(sender, instance, created, **kwargs):\n    if created:\n        UserProfile.objects.create(user=instance)\n# Signal to delete the user profile when the CustomUser is deleted\n@receiver(pre_delete, sender=CustomUser)\ndef delete_user_profile(sender, instance, **kwargs):\n    try:\n        instance.userprofile.delete()\n    except UserProfile.DoesNotExist:\n        pass",
        "detail": "users.signals",
        "documentation": {}
    },
    {
        "label": "delete_user_profile",
        "kind": 2,
        "importPath": "users.signals",
        "description": "users.signals",
        "peekOfCode": "def delete_user_profile(sender, instance, **kwargs):\n    try:\n        instance.userprofile.delete()\n    except UserProfile.DoesNotExist:\n        pass",
        "detail": "users.signals",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "users.urls",
        "description": "users.urls",
        "peekOfCode": "urlpatterns = [\n    path('register/', RegisterView.as_view(), name='register'),\n    path('login/', LoginView.as_view(), name='login'),\n    path('password_reset/', PasswordResetRequestView.as_view(), name='password_reset_request'),\n    path('reset/<uidb64>/<token>/', PasswordResetConfirmView.as_view(), name='password_reset_confirm'),\n]",
        "detail": "users.urls",
        "documentation": {}
    },
    {
        "label": "RegisterView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class RegisterView(APIView):\n    \"\"\"\n    View to handle user registration.\n    \"\"\"\n    def post(self, request):\n        serializer = RegisterSerializer(data=request.data)\n        if serializer.is_valid():\n            # Save the user instance after validation\n            serializer.save()\n            # Return a response with a success message",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class LoginView(APIView):\n    \"\"\"\n    View to handle user login and JWT token generation.\n    \"\"\"\n    def post(self, request):\n        email = request.data.get('email')\n        password = request.data.get('password')\n        # Authenticate user using email and password\n        user = authenticate(request, email=email, password=password)\n        if user is None:",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetRequestView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class PasswordResetRequestView(APIView):\n    \"\"\"\n    View to handle password reset requests.\n    \"\"\"\n    def post(self, request):\n        email = request.data.get('email')\n        # Check if the email exists in the system\n        try:\n            user = User.objects.get(email=email)\n        except User.DoesNotExist:",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "PasswordResetConfirmView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class PasswordResetConfirmView(APIView):\n    \"\"\"\n    View to handle password reset confirmation.\n    \"\"\"\n    def post(self, request, uidb64, token):\n        # Decode the uid from base64\n        try:\n            uid = urlsafe_base64_decode(uidb64).decode()\n            user = User.objects.get(pk=uid)\n        except (TypeError, ValueError, User.DoesNotExist):",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "User = get_user_model()\n# Register View\nclass RegisterView(APIView):\n    \"\"\"\n    View to handle user registration.\n    \"\"\"\n    def post(self, request):\n        serializer = RegisterSerializer(data=request.data)\n        if serializer.is_valid():\n            # Save the user instance after validation",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"ruralmart.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]